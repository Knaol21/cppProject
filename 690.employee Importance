/*
// Definition for Employee.
class Employee {
public:
    int id;
    int importance;
    vector<int> subordinates;
};
*/

class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        unordered_map<int, Employee *> idToEmployee;
        for (int i = 0; i < employees.size(); ++i) {
            idToEmployee[employees[i]->id] = employees[i];
        }

        return dfs(employees, idToEmployee, id);
    }

private:
    int dfs(vector<Employee *> &employees, unordered_map<int, Employee *> &idToEmployee, int currId) {
        Employee *curr = idToEmployee[currId];
        if (curr->subordinates.empty()) {
            return curr->importance;
        }

        int total = curr->importance;
        for (auto &nextId : curr->subordinates) {
            total += dfs(employees, idToEmployee, nextId);
        }

        return total;
        
    }
};
