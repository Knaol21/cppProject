class Solution {
public:
    vector<int> parent;
    int m,n;
    bool hasValidPath(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        parent.resize(m * n);
        for (int i = 0; i < m * n; ++i)
            parent[i] = i;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int e = grid[i][j];
                if (e == 1) {
                    if (j > 0 && (grid[i][j - 1] == 1 || grid[i][j - 1] == 4 || grid[i][j - 1] == 6))
                        unite(i * n + j, i * n + j - 1);
                    if (j < n - 1 && (grid[i][j + 1] == 1 || grid[i][j + 1] == 3 || grid[i][j + 1] == 5))
                        unite(i * n + j, i * n + j + 1);
                } else if (e == 2) {
                    if (i > 0 && (grid[i - 1][j] == 2 || grid[i - 1][j] == 3 || grid[i - 1][j] == 4))
                        unite(i * n + j, (i - 1) * n + j);
                    if (i < m - 1 && (grid[i + 1][j] == 2 || grid[i + 1][j] == 5 || grid[i + 1][j] == 6))
                        unite(i * n + j, (i + 1) * n + j);
                } else if (e == 3) {
                    if (j > 0 && (grid[i][j - 1] == 1 || grid[i][j - 1] == 4 || grid[i][j - 1] == 6))
                        unite(i * n + j, i * n + j - 1);
                    if (i < m - 1 && (grid[i + 1][j] == 2 || grid[i + 1][j] == 5 || grid[i + 1][j] == 6))
                        unite(i * n + j, (i + 1) * n + j);
                } else if (e == 4) {
                    if (j < n - 1 && (grid[i][j + 1] == 1 || grid[i][j + 1] == 3 || grid[i][j + 1] == 5))
                        unite(i * n + j, i * n + j + 1);
                    if (i < m - 1 && (grid[i + 1][j] == 2 || grid[i + 1][j] == 5 || grid[i + 1][j] == 6))
                        unite(i * n + j, (i + 1) * n + j);
                } else if (e == 5) {
                    if (j > 0 && (grid[i][j - 1] == 1 || grid[i][j - 1] == 4 || grid[i][j - 1] == 6))
                        unite(i * n + j, i * n + j - 1);
                    if (i > 0 && (grid[i - 1][j] == 2 || grid[i - 1][j] == 3 || grid[i - 1][j] == 4))
                        unite(i * n + j, (i - 1) * n + j);
                } else if (e == 6) {
                    if (j < n - 1 && (grid[i][j + 1] == 1 || grid[i][j + 1] == 3 || grid[i][j + 1] == 5))
                        unite(i * n + j, i * n + j + 1);
                    if (i > 0 && (grid[i - 1][j] == 2 || grid[i - 1][j] == 3 || grid[i - 1][j] == 4))
                        unite(i * n + j, (i - 1) * n + j);
                }
            }
        }

        return find(0) == find(m * n - 1);
    }

private:
    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    void unite(int x, int y) {
        parent[find(x)] = find(y);
        
    }
};
